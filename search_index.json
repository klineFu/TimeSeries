[["index.html", "A Minimal Book Example 前言", " A Minimal Book Example 思想先进的猫猫 2023-05-25 前言 这是时间序列的作业。我把这些作业汇总到了一个bookdown里面。 "],["第一章作业.html", "Chapter 1 第一章作业 1.1 复现课本图像 1.2 随机数的产生 1.3 课后习题", " Chapter 1 第一章作业 1.1 复现课本图像 利用R语言复现课本中的时间序列图像 1.1.1 强生公司季度收益序列 library(astsa) par(mfrow=2:1) tsplot(jj,ylab=&quot;QEPS&quot;,type=&quot;o&quot;,col=4,main=&quot;Johnson &amp; Johnson Quarterly Earnings&quot;) tsplot(log(jj),ylab=&quot;log(QEPS)&quot;,type=&quot;o&quot;,col=4) 1.1.2 全球变暖和气候变化 culer = c(rgb(.85,.30,.12,.6),rgb(.12,.65,.85,.6)) tsplot(gtemp_land,col=culer[1], lwd=2, type = &quot;o&quot;, pch = 20, ylab = &quot;Temperature Deviations&quot;, main = &quot;Global Warming&quot;) lines(gtemp_ocean,col=culer[2],lwd=2, type=&quot;o&quot;,pch=20) legend(&quot;topleft&quot;,col=culer,lty = 1,lwd=2, pch = 20, legend = c(&quot;Land Surface&quot;,&quot;Sea Surface&quot;),bg=&quot;white&quot;) 1.1.3 道琼斯工业平均指数 library(xts) djia_return= diff(log(djia$Close))[-1] par(mfrow=2:1) plot(djia$Close, col=4) plot(djia_return, col=4) 1.1.4 美国GDP对数增长率与实际增长率 tsplot(diff(log(gdp)),type = &quot;o&quot;, col = 4, ylab = &quot;GDP Growth&quot;) points(diff(gdp)/lag(gdp,-1),pch=3, col=2) 1.1.5 厄尔尼诺—南方涛动（ENSO） par(mfrow=2:1) tsplot(soi,ylab = &quot;&quot;, xlab = &quot;&quot;, main = &quot;Southern Dscillation Index&quot;,col = 4) text(1970, .91, &quot;COOL&quot;,col=&quot;cyan4&quot;) text(1970,- .91, &quot;WARN&quot;,col=&quot;darkmagenta&quot;) tsplot(rec, ylab = &quot;&quot;, main = &quot;Recruitment&quot;,col = 4) 1.1.6 捕食者与猎物的互动 culer = c(rgb(.85, .30, .12, .6),rgb(.12, .67, .86, .6)) tsplot(Hare, col = culer[1],lwd = 2,type = &quot;o&quot;, pch = 0, ylab = expression(Number~~~(&quot;&quot;%*% 1000))) lines(Lynx,col=culer[2],lwd=2,type=&quot;o&quot;, pch=2) legend(&quot;topright&quot;,col = culer,lty = 1, lwd=2, pch = c(0,2), legend = c(&quot;Hare&quot;,&quot;Lynx&quot;),bty = &quot;n&quot;) 1.1.7 fMRI图像 par(mfrow=c(3,1)) culer=c(rgb(.12,.67,.85,.7),rgb(.67,.12,.85,.7)) u=rep(c(rep(.6,16),rep(-.6,16)),4) tsplot(fmri1[,4],ylab=&quot;BOLD&quot;,xlab=&quot;&quot;,main=&quot;Cortex&quot;, col=culer[1],ylim=c(-.6,.6),lwd=2) lines(fmri1[,5],col=culer[2],lwd=2) lines(u,type=&quot;s&quot;) tsplot(fmri1[,6],ylab=&quot;BOLD&quot;,xlab=&quot;&quot;,main=&quot;Thalamus&quot;, col=culer[1],ylim=c(-.6,.6),lwd=2) lines(fmri1[,7],col=culer[2],lwd=2) lines(u,type=&quot;s&quot;) tsplot(fmri1[,8],ylab=&quot;BOLD&quot;,xlab=&quot;&quot;,main=&quot;Cerebellum&quot;, col=culer[1],ylim=c(-.6,.6),lwd=2) lines(fmri1[,9],col=culer[2],lwd=2) lines(u,type=&quot;s&quot;) mtext(&quot;Time (1 pt = 2 sec)&quot;,side=1,line=1.75) 1.1.8 滤波序列 par(mfrow=2:1) w=rnorm(500) v=filter(w,sides = 2,filter = rep(1/3,3)) # moving ave 1.1.9 自回归模型 set.seed(90210) w=rnorm(250+50) # 50 extra to avoid startup problems x=filter(w,filter = c(1.5,-.75),method = &quot;recursive&quot;)[-(1:50)] tsplot(x,main=&quot;autoregression&quot;,col=4) 1.1.10 带漂移项的随机游走序列 set.seed(314159265) # so you can reproduce the results w=rnorm(200);x =cumsum(w) # random walk wd = w +.3; xd = cumsum (wd) # random walk with drift tsplot(xd, ylim=c(-2,80),main=&quot;random walk&quot;, ylab=&quot;&quot;, co1=4) abline(a=0, b=.3, lty=2, co1=4) # plot drift lines (x, col=&quot;darkred&quot;) abline (h=0, col=&quot;darkred&quot;, lty=2) 1.1.11 信号与噪声 t=1:500 cs=2*cos(2*pi*(t+15)/50) #signal w= rnorm(500) #noise par(mfrow=c(3,1)) tsplot(cs, col=4,main=expression(2*cos(2*pi*(t+15)/50))) tsplot(cs+w, col=4,main=expression(2*cos(2*pi+(t+15)/50+N(0,1)))) tsplot(cs+5*w, col=4,main=expression(2*cos(2*pi*(t+15/50)+N(0,5^2)))) 1.2 随机数的产生 利用R语言，产生1000个服从标准正态分布的随机数，绘制散点图，计算样本均值与方差，并且标注在图形中。 # 导入ggplot2包 library(ggplot2) # 生成1000个服从标准正态分布的随机数 set.seed(123) # 设置随机数种子，以便复现结果 x &lt;- rnorm(1000) # 计算样本均值和方差 mean_x &lt;- mean(x) var_x &lt;- var(x) # 使用ggplot绘制散点图，并将样本均值和方差作为图例放置在图上 ggplot(data = data.frame(x = x, index = 1:1000), aes(x = index, y = x)) + geom_point(shape = 16) + labs(x = &quot;Index&quot;, y = &quot;Value&quot;, title = paste(&quot;Sample Mean:&quot;, round(mean_x, 2), &quot;,Sample Variance:&quot;, round(var_x, 2))) + theme(plot.title = element_text(hjust = 0.5, size = 12, face = &quot;bold&quot;), legend.title = element_blank(), legend.position = c(0.85, 0.85)) 1.3 课后习题 1.3.1 习题1.1 绘制\\(x_t\\)的线图，并把\\(v_t\\)作为线图作为虚线叠加 w = rnorm (150,0,1) # 50 extra to avoid startup problems xa=filter(w,filter=c(0,-.9),method=&quot;recursive&quot;)[-(1:50)] va = filter (xa, rep (1,4)/4, sides=1) # moving average tsplot(xa, main=&quot;autoregression&quot;) lines(va, col=2) 选取\\(x_t=2cos(\\frac{2\\pi t}{4})+w_t\\)，其中\\(w_t\\sim iidN(0,1)\\) w = rnorm (150,0,1) # 50 extra to avoid startup problems t=1:150 xa=(2*cos(2*pi*t/4)+w)[-(1:50)] va = filter (xa, rep (1,4)/4, sides=1) # moving average tsplot(xa, main=&quot;autoregression&quot;) lines(va, col=2) 选取\\(x_t\\)为取对数后的强生公司嫉妒收益率数据 library(astsa) xa=log(jj) va = filter (xa, rep (1,4)/4, sides=1) # moving average tsplot(xa, main=&quot;autoregression&quot;) lines(va, col=2) 季节调整（Seasonal adjustment）是指一种用于消除季节性波动影响的统计方法。季节性波动是指由于季节、节假日等因素引起的一种周期性变化，例如在冬季，因为天气寒冷，许多行业的销售会有所下降；而在夏季，因为气温升高，冰激凌、游泳池等与夏季相关的行业销售则会增加。为了对这些季节性因素进行更准确的分析，经济学家和统计学家通常会使用季节调整技术来消除季节性影响。这个过程包括计算出一个季节调整系数，该系数可以根据历史数据中的季节性模式来预测未来数据中的季节性影响，并将其从原始数据中剔除，以得到更准确的趋势分析结果。这样做可以让人们更好地理解经济或其他变量的发展趋势，同时避免因季节性因素而产生误导性的分析结果。 在进行统计分析的过程中，应当尽可能将可能影响数据的因素包含在考虑之中，如果分析过程中忽略了重要因素的影响就可能会导致错误的分析结果，上面的季节性因素就是一个典型的例子。 1.3.2 习题1.2 分别绘制地震序列和爆炸序列 par (mfrow=2:1) tsplot (EQ5, main=&quot;Earthquate&quot;) tsplot (EXP6, main=&quot;Explosion&quot;) 将两个线形绘制到同一个图表上 ts.plot(EQ5, EXP6, col=1:2) legend(&quot;topleft&quot;, lty=1, col=1:2, legend=c(&quot;EQ&quot; , &quot;EXP&quot;)) 地震序列通常具有相对较低的峰值频率。相比之下，爆炸序列其频率范围较窄，波形相对简单且更加规则。爆炸序列的幅度和频率通常比地震序列要小，而且通常具有相对较高的峰值频率。 1.3.3 习题1.3 生成9个随机游走序列 par(mfrow=c(3,3)) for (i in 1:9){ x = cumsum (rnorm (500)) tsplot (x) } 生成9个移动平均序列 w = rnorm (500) par(mfrow=c(3,3)) for (i in 1:9){ v=filter(w,sides = 2,filter = rep(1/3,3)) tsplot (v) } 移动平均得到的图像看起来十分的相似，而随机游走过程得到的图像彼此之间差别比较大。 1.3.4 习题1.4 绘制数据的时间序列图 tsplot(gdp, col = 4, ylab = &quot;GDP&quot;) 与1.3节中建立的模型相比，上述图像反映了时间与GDP之间的关系。 绘制图1.4 tsplot(diff(log(gdp)),type = &quot;o&quot;, col = 4, ylab = &quot;GDP Growth&quot;) points(diff(gdp)/lag(gdp,-1),pch=3, col=2) 两种方法分别采用了\\(r_t\\)和\\(log(1+r_t)\\)，观察绘制的图像，并且结合\\(log(1+r)\\)的Taylor展式 \\[\\begin{align} log(1+r_t)=r-\\frac{r^2}{2}+\\frac{r^3}{3}-···，-1&lt;r\\le 1 \\end{align}\\] 可以发现，采用\\(r_t\\)得到的结果更大，但是在r非常小的情况下可以忽略这种影响，近似认为两者等价。 1.3节中讨论到的带漂移项的随机游走序列最能描述美国GDP增长情况。 "],["第二章作业.html", "Chapter 2 第二章作业 2.1 Load package 2.2 2.11 高斯白噪声序列 2.3 2.12 移动平均序列 2.4 2.13 AR模型 2.5 2.14 信号加噪声模型", " Chapter 2 第二章作业 2.1 Load package 声明需要使用的包 library(astsa) 2.2 2.11 高斯白噪声序列 2.2.1 2.11 (a) 和例 1.7 一样，模拟长度为 n = 500 的一个高斯白噪声序列，然后计算其滞后 1 到 20 阶的样本 ACF，记作 \\(\\hat{\\rho}(h)\\)。把得到的结果与真实的 ACF 即 \\(\\rho(h)\\) 进行 比较。 w=rnorm(500) acf1(w,20) ## [1] -0.01 0.03 0.05 -0.04 0.02 0.00 -0.06 -0.02 -0.01 0.02 0.05 -0.02 ## [13] 0.01 0.07 0.02 0.03 -0.01 -0.04 0.03 0.04 2.2.2 2.11 (b) 设 n = 50，重复（a）。长度 n 是如何影响结果的？ w=rnorm(50) acf1(w,20) ## [1] -0.03 0.04 0.19 -0.01 -0.01 0.10 -0.05 -0.34 0.08 -0.09 -0.23 0.02 ## [13] -0.09 -0.12 -0.12 -0.01 -0.11 0.01 0.10 -0.07 长度 n 越长计算得到的ACF越小，得到的结果越准确。 2.3 2.12 移动平均序列 2.3.1 2.12 (a) 和例 1.8 一样，模拟长度为 n = 500 的一个移动平均序列，然后计算其滞后 1 到 20 阶样本 ACF 即 \\(\\hat{\\rho}(h)\\)。把得到的结果与真实的 ACF 即 \\(\\rho(h)\\) 进行 比较。 wa=rnorm(502,0,1) va=filter(wa,filter=rep(1/3.3)) acf1(va,20) ## [1] 0.02 0.09 -0.01 0.00 0.05 -0.03 0.03 0.01 0.03 0.05 -0.04 0.01 ## [13] -0.03 0.03 -0.01 0.01 0.01 0.05 -0.07 0.05 2.3.2 2.12 (b) 设 n = 50，重复（a）。长度 n 是如何影响结果的？ wa=rnorm(52,0,1) va=stats::filter(wa,rep(1/3,3)) acf1(va,20) ## [1] 0.50 0.25 -0.07 0.10 0.13 0.20 0.02 -0.06 -0.28 -0.15 -0.18 -0.07 ## [13] -0.18 -0.13 -0.14 0.01 -0.05 0.08 -0.04 0.07 长度 n 越长计算得到的ACF越小，得到的结果越准确。 2.4 2.13 AR模型 模拟一个例 1.9 中给出的 AR 模型，模拟序列长度为 n = 500。然后绘制其滞后 1 到 50 阶的样本 ACF。从样本 ACF 可以大致得到数据循环行为的什么结论？ set.seed(90210) w=rnorm(500+50) # 50 extra to avoid startup problems x=filter(w,filter = c(1.5,-.75),method = &quot;recursive&quot;)[-(1:50)] acf1(x,50) ## [1] 0.86 0.53 0.14 -0.21 -0.43 -0.49 -0.41 -0.24 -0.05 0.13 0.24 0.28 ## [13] 0.26 0.19 0.11 0.02 -0.04 -0.08 -0.10 -0.09 -0.08 -0.06 -0.04 -0.01 ## [25] 0.02 0.06 0.09 0.12 0.13 0.12 0.08 0.02 -0.05 -0.11 -0.14 -0.13 ## [37] -0.08 -0.01 0.07 0.12 0.14 0.11 0.06 -0.01 -0.06 -0.10 -0.11 -0.09 ## [49] -0.05 -0.03 随着样本ACF阶数的增加，ACF将逐渐收敛到0。 2.5 2.14 信号加噪声模型 4 模拟例 1.11 中给出的信号加噪声模型，其中（a）\\(\\sigma_{w}\\) = 0,（b）\\(\\sigma_{w}\\) = 1，（c）\\(\\sigma_{w}\\) = 5。模 拟序列长度为 n = 500。然后绘制生成的这三个序列的滞后 1 到 100 阶的样本 ACF。 从这三个序列的样本 ACF 可以大致得到数据循环行为的什么结论？ t=1:500 cs=2*cos(2*pi*(t+15)/50) #signal w1= rnorm(500,0,0) #noise w2= rnorm(500,0,1) w3= rnorm(500,0,5) par(mfrow=c(3,1)) acf1(cs, col=4,main=expression(2*cos(2*pi*(t+15)/50))) ## [1] 0.99 0.97 0.93 0.87 0.81 0.73 0.64 0.54 0.43 0.31 0.19 0.07 ## [13] -0.05 -0.17 -0.29 -0.40 -0.51 -0.61 -0.69 -0.77 -0.83 -0.88 -0.92 -0.94 ## [25] -0.95 -0.94 -0.92 -0.88 -0.83 -0.77 -0.69 -0.61 -0.51 acf1(cs+w, col=4,main=expression(2*cos(2*pi+(t+15)/50+N(0,1)))) ## [1] 0.65 0.62 0.63 0.57 0.51 0.48 0.42 0.36 0.27 0.22 0.15 0.05 ## [13] -0.05 -0.07 -0.20 -0.27 -0.32 -0.40 -0.48 -0.49 -0.59 -0.59 -0.61 -0.65 ## [25] -0.62 -0.62 -0.63 -0.57 -0.56 -0.50 -0.45 -0.41 -0.36 -0.26 acf1(cs+5*w, col=4,main=expression(2*cos(2*pi*(t+15/50)+N(0,5^2)))) ## [1] 0.07 0.04 0.12 0.07 0.01 0.05 0.05 0.07 -0.01 0.06 0.07 0.03 ## [13] -0.04 0.10 -0.04 -0.04 0.01 -0.03 -0.11 0.01 -0.15 -0.06 -0.06 -0.12 ## [25] -0.04 -0.05 -0.11 -0.03 -0.08 -0.02 -0.02 -0.06 -0.10 0.00 方差越大样本的ACF越小。 "],["第三章作业.html", "Chapter 3 第三章作业 3.1 Libs 3.2 3.1 结构回归模型 3.3 3.2 检验的死亡率数据 3.4 3.3 随机游走和趋势平稳过程之间的区别 3.5 3.4 线性趋势组成的过程 3.6 3.5 平稳性证明 3.7 3.6 冰川纹层数据 3.8 3.7 全球温度序列 3.9 3.8 厄尔尼诺现象 3.10 3.9 强生公司数据序列", " Chapter 3 第三章作业 3.1 Libs pacman::p_load(astsa,tidyverse,ggplot2,reshape2) 3.2 3.1 结构回归模型 3.2.1 3.1 (a) 拟合回归模型： trend = time(jj) - 1970 Q = factor(cycle(jj)) reg = lm(log(jj)~0+trend+Q,na.action = NULL) head(model.matrix(reg)) ## trend Q1 Q2 Q3 Q4 ## 1 -10.00 1 0 0 0 ## 2 -9.75 0 1 0 0 ## 3 -9.50 0 0 1 0 ## 4 -9.25 0 0 0 1 ## 5 -9.00 1 0 0 0 ## 6 -8.75 0 1 0 0 summary(reg) ## ## Call: ## lm(formula = log(jj) ~ 0 + trend + Q, na.action = NULL) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.29318 -0.09062 -0.01180 0.08460 0.27644 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## trend 0.167172 0.002259 74.00 &lt;2e-16 *** ## Q1 1.052793 0.027359 38.48 &lt;2e-16 *** ## Q2 1.080916 0.027365 39.50 &lt;2e-16 *** ## Q3 1.151024 0.027383 42.03 &lt;2e-16 *** ## Q4 0.882266 0.027412 32.19 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1254 on 79 degrees of freedom ## Multiple R-squared: 0.9935, Adjusted R-squared: 0.9931 ## F-statistic: 2407 on 5 and 79 DF, p-value: &lt; 2.2e-16 3.2.2 3.1 (b) 如果模型正确，根据summary()得到的结果平均每股对数收益率的年增长的估计值是0.167172。 3.2.3 3.1 (c) 如果模型正确，平均对数收益率从第三季度到第四季度会减少，根据summary()得到的结果，减少的百分比是Q4-Q3=0.268758 3.2.4 3.1 (d) 如果在(a)中的模型中包含截距项，第四季度分量将变成负的。 reg2 = lm(log(jj)~0+trend+Q+1,na.action = NULL) head(model.matrix(reg2)) ## (Intercept) trend Q2 Q3 Q4 ## 1 1 -10.00 0 0 0 ## 2 1 -9.75 1 0 0 ## 3 1 -9.50 0 1 0 ## 4 1 -9.25 0 0 1 ## 5 1 -9.00 0 0 0 ## 6 1 -8.75 1 0 0 summary(reg2) ## ## Call: ## lm(formula = log(jj) ~ 0 + trend + Q + 1, na.action = NULL) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.29318 -0.09062 -0.01180 0.08460 0.27644 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.052793 0.027359 38.480 &lt; 2e-16 *** ## trend 0.167172 0.002259 73.999 &lt; 2e-16 *** ## Q2 0.028123 0.038696 0.727 0.4695 ## Q3 0.098231 0.038708 2.538 0.0131 * ## Q4 -0.170527 0.038729 -4.403 3.31e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1254 on 79 degrees of freedom ## Multiple R-squared: 0.9859, Adjusted R-squared: 0.9852 ## F-statistic: 1379 on 4 and 79 DF, p-value: &lt; 2.2e-16 3.2.5 3.1 (e) 绘制数据\\(x_t\\)并在图表上叠加拟合值 a &lt;- data.frame(Time=c(time(log(jj))),logjj=c(log(jj)),fit=reg$fitted.values) a &lt;- melt(a,id=&quot;Time&quot;) ## Warning: attributes are not identical across measure variables; they will be ## dropped p_line=ggplot(group_by(a),aes(x=Time,y=value,group=variable,col=variable))+ geom_line()+ xlab(&quot;Time&quot;)+ ylab(&quot;log(QEPS)&quot;) p_line 检查残差，首先观察Q-Q图 tsplot(reg$residuals) tibble(reg$residuals) %&gt;% ggplot(aes(sample = reg$residuals)) + geom_qq() + geom_qq_line() ## Don&#39;t know how to automatically pick scale for object of type &lt;ts&gt;. ## Defaulting to continuous. ## Don&#39;t know how to automatically pick scale for object of type &lt;ts&gt;. ## Defaulting to continuous. 使用Box-Ljung 检验来检测残差是否是白噪声 #Box-Ljung 检验 Box.test(reg$residuals,type=&#39;Ljung&#39;,lag=log(length(reg$residuals))) ## ## Box-Ljung test ## ## data: reg$residuals ## X-squared = 54.362, df = 4.4308, p-value = 8.166e-11 由于pvalue小于0.5，因此残差不是白噪声。 3.3 3.2 检验的死亡率数据 3.3.1 3.2 (a) 在式 (3.17) 中为回归添加另一个分量，该分量考虑了四周前的颗粒物数量。将\\(P_{t-4}\\) 添加到式 (3.17) 的回归中 temp = tempr-mean(tempr) ded = ts.intersect(cmort,trend=time(cmort),temp,temp2=temp^2, part,partL4=stats::lag(part,-4)) n&lt;-length(ded)/6 fit = lm(ded[1:n,1]~ ded[1:n,2] + ded[1:n,3] + ded[1:n,4] + ded[1:n,5] + ded[1:n,6], na.action=NULL) summary(fit) ## ## Call: ## lm(formula = ded[1:n, 1] ~ ded[1:n, 2] + ded[1:n, 3] + ded[1:n, ## 4] + ded[1:n, 5] + ded[1:n, 6], na.action = NULL) ## ## Residuals: ## Min 1Q Median 3Q Max ## -18.228 -4.314 -0.614 3.713 27.800 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.808e+03 1.989e+02 14.123 &lt; 2e-16 *** ## ded[1:n, 2] -1.385e+00 1.006e-01 -13.765 &lt; 2e-16 *** ## ded[1:n, 3] -4.058e-01 3.528e-02 -11.503 &lt; 2e-16 *** ## ded[1:n, 4] 2.155e-02 2.803e-03 7.688 8.02e-14 *** ## ded[1:n, 5] 2.029e-01 2.266e-02 8.954 &lt; 2e-16 *** ## ded[1:n, 6] 1.030e-01 2.485e-02 4.147 3.96e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6.287 on 498 degrees of freedom ## Multiple R-squared: 0.608, Adjusted R-squared: 0.6041 ## F-statistic: 154.5 on 5 and 498 DF, p-value: &lt; 2.2e-16 得到的回归结果如上。 3.3.2 3.2 (b) 计算AIC和BIC num=length(cmort) AIC(fit)/num-log(2*pi) ## [1] 4.641492 BIC(fit)/num-log(2*pi) ## [1] 4.699677 与例 3.5 中最终模型对比可以发现AIC,BIC的值更小了。因此，(a)中模型是对3.5 中最终模型的改进。 3.4 3.3 随机游走和趋势平稳过程之间的区别 3.4.1 3.3 (a) 生成四个带漂移项的随机游走序列 par(mrow=c(2,2)) ## Warning in par(mrow = c(2, 2)): &quot;mrow&quot; is not a graphical parameter for (i in 1:4) { x = ts(cumsum(rnorm(500,.01,1))) regx=lm(x~0+time(x),na.action = NULL) tsplot(x,ylab = &quot;Random Walk w Drift&quot;,col=&quot;darkgray&quot;) abline(a=0,.01,col=2,lty=2) abline(regx,col(4)) } 3.4.2 3.3 (b) 生成四个序列，长度 n = 500，它们是线性趋势加上噪声 par(mrow=c(2,2)) ## Warning in par(mrow = c(2, 2)): &quot;mrow&quot; is not a graphical parameter t=1:500 for (i in 1:4) { y = ts(rnorm(500,.01,1)+0.01*t) regx=lm(y~0+time(y),na.action = NULL) tsplot(y,ylab = &quot;Random Walk w Drift&quot;,col=&quot;darkgray&quot;) abline(a=0,.01,col=2,lty=2) abline(regx,col(4)) } 3.4.3 3.3 (c) (a)中得到的四个结果之间存在较大的差异，而(b)中得到的结果尽管存在差异，但是差异很小，并且(b)中得到的图像总是具有相同的趋势。这是因为\\(0.01t\\)在起作用。 3.5 3.4 线性趋势组成的过程 3.5.1 3.4 (a) 证明 \\(x_t\\) 是非平稳的。 \\[\\begin{align} \\mu_{x_t}&amp;=E[x_{t}]\\notag\\\\ &amp;=\\beta_{0}+\\beta_{1}t\\notag \\end{align}\\] 由于均值函数和时间有关，因此不是平稳的。 3.5.2 3.4 (b) 通过找出其均值和自协方差函数证明一阶差分序列是平稳的。 \\[\\begin{align} \\nabla x_{t}&amp;= x_{t}-x_{t-1}\\notag\\\\ &amp;=\\beta_{0}+\\beta_{1}t-\\beta_{0}-\\beta_{1}(t-1)-w_{t-1}\\notag\\\\ &amp;=\\beta_{1}+w_{t}-w_{t-1}\\notag \\end{align}\\] 其均值和自协方差函数分别如下： \\[\\begin{align} \\mu_{\\nabla x_{t}}&amp;=E[\\nabla x_{t}]=\\beta_{1}\\notag\\\\ \\gamma(h)&amp;=cov(\\beta_{1}+w_{t}-w_{t-1},\\beta_{1}+w_{t+h}-w_{t+h-1})\\notag\\\\ &amp;=\\left\\{ \\begin{array}{rcl} &amp;2\\sigma_{w}^{2} &amp; {h=0}\\\\ &amp;-\\sigma_{w}^{2} &amp; {|h|=1}\\\\ &amp;0 &amp; {2\\leq |h|}\\notag \\end{array} \\right. \\end{align}\\] 由于均值函数与t无关，并且自协方差函数仅与h有关，所以该序列平稳。 3.5.3 3.4 (c) 果用一般的平稳过程（即 \\(y_t\\)）代替 \\(w_t\\)， \\[\\begin{align} \\nabla x_{t}&amp;= \\beta_{1}+y_{t}-y_{t-1}\\notag \\end{align}\\] 其均值和自协方差函数分别如下： \\[\\begin{align} \\mu_{\\nabla x_{t}}&amp;=E[\\nabla x_{t}]=\\beta_{1}\\notag\\\\ \\gamma(h)&amp;=cov(\\beta_{1}+y_{t}-y_{t-1},\\beta_{1}+y_{t+h}-y_{t+h-1})\\notag\\\\ &amp;=\\left\\{ \\begin{array}{rcl} &amp;2\\sigma_{y}^{2} &amp; {h=0}\\\\ &amp;-\\sigma_{y}^{2} &amp; {|h|=1}\\\\ &amp;0 &amp; {2\\leq |h|}\\notag \\end{array} \\right. \\end{align}\\] 由于均值函数与t无关，并且自协方差函数仅与h有关，所以该序列平稳。 3.6 3.5 平稳性证明 序列为： \\[\\begin{align} \\nabla x_{t}&amp;= x_{t}-x_{t-1}\\notag\\\\ &amp;= \\sigma+w_{t}+y_{t}-y_{t-1}\\notag \\end{align}\\] 其均值和自协方差函数分别如下： \\[\\begin{align} \\mu_{\\nabla x_{t}}&amp;=E[\\nabla x_{t}]=\\sigma\\notag\\\\ \\gamma(h)&amp;=cov(\\sigma+w_{t}+y_{t}-y_{t-1},\\sigma+w_{t+h}+y_{t+h}-y_{t+h-1})\\notag\\\\ &amp;=\\left\\{ \\begin{array}{rcl} &amp;2\\sigma_{y}^{2}+\\sigma_{w}^{2} &amp; {h=0}\\\\ &amp;\\sigma_{y}^{2} &amp; {|h|=1}\\\\ &amp;0 &amp; {2\\leq |h|}\\notag \\end{array} \\right. \\end{align}\\] 3.7 3.6 冰川纹层数据 3.7.1 3.6 (a) 在数据的前半部分和后半部分计算样本方差： x=varve y=log(varve) n=length(x)/2 N=length(x) var(x[1:n]) ## [1] 133.4574 var(x[n:N]) ## [1] 592.9645 这表明数据存在异方差性。 进行变换\\(y_t=log(x_t)\\)后，再次在数据的前半部分和后半部分计算样本方差： n=length(y)/2 N=length(y) var(y[1:n]) ## [1] 0.2707217 var(y[n:N]) ## [1] 0.4506843 这说明变换稳定了序列的方差。 绘制直方图： hist(x) hist(y) 观察直方图可以发现数据向中间靠拢，这表明通过变换数据改善了对正态性的近似。 3.7.2 3.6 (b) 绘制序列\\(y_t\\) tsplot(y) 存在100年的时间间隔，可以观察到与图1.2中的全球温度记录中观察到的行为相当的行为。 3.7.3 3.6 (c) 检查\\(y_t\\)的样本ACF，并绘制图像 acf1(y) ## [1] 0.59 0.51 0.46 0.46 0.46 0.46 0.43 0.43 0.41 0.37 0.37 0.33 0.34 0.38 0.36 ## [16] 0.35 0.34 0.33 0.30 0.31 0.36 0.36 0.32 0.33 0.31 0.29 0.30 0.27 0.28 0.28 ## [31] 0.28 0.28 0.23 0.23 0.25 0.23 可以发现样本ACF较高，这说明进行变换后时间序列\\(y_t\\)仍然存在问题 3.7.4 3.6 (d) 计算差分\\(u_t=y_t-y_{t-1}\\)，检查其时序图以及样本ACF u=y-stats::lag(y,1) tsplot(u) acf1(u) ## [1] -0.40 -0.04 -0.06 0.01 0.00 0.04 -0.04 0.04 0.01 -0.05 0.06 -0.06 ## [13] -0.04 0.08 -0.02 0.01 0.00 0.03 -0.05 -0.06 0.07 0.04 -0.06 0.05 ## [25] -0.01 -0.04 0.05 -0.05 0.03 -0.02 0.00 0.06 -0.05 -0.03 0.04 -0.05 这表明差分对数纹层数据得到了一个相当稳定的序列。\\(u_t\\)实际上是除去了时间影响的一个序列，这使得它近似一个白噪声。 3.8 3.7 全球温度序列 3.8.1 3.7 移动平均平滑器 w = c(.5, rep(1,11), .5)/12 gtemp_landf = stats::filter(gtemp_land, sides=2, filter=w) culer = c(rgb(.85,.30,.12,.6),rgb(.12,.65,.85,.6)) tsplot(gtemp_landf,col=culer[1], lwd=2, type = &quot;o&quot;, pch = 20, ylab = &quot;Temperature Deviations&quot;, main = &quot;Global Warming&quot;) lines(gtemp_ocean,col=culer[2],lwd=2, type=&quot;o&quot;,pch=20) legend(&quot;topleft&quot;,col=culer,lty = 1,lwd=2, pch = 20, legend = c(&quot;Land Surface&quot;,&quot;Sea Surface&quot;),bg=&quot;white&quot;) 3.8.2 3.7 核平滑 culer = c(rgb(.85,.30,.12,.6),rgb(.12,.65,.85,.6)) tsplot(gtemp_land,col=culer[1], lwd=2, type = &quot;o&quot;, pch = 20, ylab = &quot;Temperature Deviations&quot;, main = &quot;Global Warming&quot;) lines(ksmooth(time(gtemp_ocean), gtemp_ocean, &quot;normal&quot;, bandwidth=1), lwd=2, col=6) legend(&quot;topleft&quot;,col=culer,lty = 1,lwd=2, pch = 20, legend = c(&quot;Land Surface&quot;,&quot;Sea Surface&quot;),bg=&quot;white&quot;) 3.8.3 3.7 lowess culer = c(rgb(.85,.30,.12,.6),rgb(.12,.65,.85,.6)) tsplot(gtemp_land,col=culer[1], lwd=2, type = &quot;o&quot;, pch = 20, ylab = &quot;Temperature Deviations&quot;, main = &quot;Global Warming&quot;) lines(lowess(gtemp_ocean, f=.05), lwd=2, col=4) legend(&quot;topleft&quot;,col=culer,lty = 1,lwd=2, pch = 20, legend = c(&quot;Land Surface&quot;,&quot;Sea Surface&quot;),bg=&quot;white&quot;) 3.9 3.8 厄尔尼诺现象 trnd = time(soi) C4 = cos(2*pi*trnd/4) S4 = sin(2*pi*trnd/4) tsplot(C4, col=astsa.col(4,.6)) lines(lowess(C4, f=.05), lwd=2, col=4) tsplot(S4, col=astsa.col(4,.6)) lines(lowess(S4, f=.05), lwd=2, col=4) 3.10 3.9 强生公司数据序列 使用例 3.20 中提到的方法将滞后数据分解为 \\(x_t=T_t+S_t+N_t\\)，可得结果如下： culer = c(5, 4, 2, 6) x = log(jj) par(mfrow = c(4,1), cex.main=1) out = stl(x, s.window=15)$time.series tsplot(x, main=&#39;Johnson &amp; Johnson Quarterly Earnings&#39;, ylab=&#39;log(QEPS)&#39;, col=8) text(x, labels=1:4, col=culer, cex=1.25) tsplot(out[,1], main=&quot;Seasonal&quot;, ylab=&#39;log(QEPS)&#39;,col=8) text(out[,1], labels=1:4, col=culer, cex=1.25) tsplot(out[,2], main=&quot;Trend&quot;, ylab=&#39;log(QEPS)&#39;, col=8) text(out[,2], labels=1:4, col=culer, cex=1.25) tsplot(out[,3], main=&quot;Noise&quot;, ylab=&#39;log(QEPS)&#39;, col=8) text(out[,3], labels=1:4, col=culer, cex=1.25) 3.1中分解得到的“白噪声”数据并不是真正的白噪声，相比之下，3.9采用的方法可以更好的分解数据。 "],["第四章作业.html", "Chapter 4 第四章作业 4.1 Libs 4.2 4.1 MA(1)的ACF 4.3 4.2 白噪声过程 4.4 4.3 参数冗余的讨论 4.5 4.4 三个ARMA模型 4.6 4.5 cmort数据分析 4.7 4.6 模型预测与MSPE 4.8 4.7 参数估计 4.9 4.8 参数的MLE 4.10 4.9 AR(1)的高斯-牛顿算法 4.11 4.10 预测误差", " Chapter 4 第四章作业 4.1 Libs pacman::p_load(astsa,tidyverse,ggplot2,reshape2,forecast) 4.2 4.1 MA(1)的ACF MA(1)模型为： \\[ x_{t}=w_t +\\theta w_{t-1} \\] 根据自相关函数的定义，可知MA(1)的自相关函数为： \\[\\begin{align} \\rho_{x}(1)=\\frac{\\gamma(1)}{\\gamma(0)}&amp;=\\frac{cov(x_t,x_{t+1})}{cov(x_t,x_t)}\\notag\\\\ &amp;=\\frac{\\theta}{1+\\theta^2}\\notag \\end{align}\\] 对MA(1)的ACF进行求导，可得： \\[\\begin{align} \\rho_{x}^{&#39;}(1)=\\frac{1+\\theta-2\\theta^2}{(1+\\theta^2)^2}\\notag \\end{align}\\] 令ACF等于0，可以解得： \\[ \\theta_{1}=-\\frac{1}{2}, \\theta_{2}=1 \\] 故可知，当\\(\\theta=1\\)时，ACF有最大值： \\[ max \\rho_{x}^{}(1)=\\frac{1}{2} \\] 当\\(\\theta=-\\frac{1}{2}\\)时，ACF有最小值： \\[ min \\rho_{x}^{}(1)=-\\frac{2}{5} \\] 因此，也证明了下式： \\[ |\\rho_{x}(1)|\\le1/2 \\] 实际上，也可以利用R来简单的观察到函数的大致性质： curve(x/(1+x^2),from = -10, to=10) \\(\\square\\) 4.3 4.2 白噪声过程 4.3.1 (a) 使用数学归纳法来证明命题，在\\(t=1\\)时： \\[\\begin{align} x_{1}&amp;=\\phi x_{0}+w_{1}\\notag\\\\ &amp;=\\phi w_{0}+w_{1}\\notag\\\\ &amp;=\\sum_{j=0}^{t}\\phi^{j}w_{1-j}\\notag \\end{align}\\] 命题成立。现假设\\(t-1\\)时命题为真，即为： \\[ x_{t-1} =\\sum_{j=0}^{t-1}\\phi^{j}w_{t-1-j} \\] 那么在等于\\(t\\)时： \\[\\begin{align} x_{t}&amp;=\\phi x_{t-1}+w_{t}\\notag\\\\ &amp;=\\phi \\sum_{j=0}^{t-1}\\phi^{j}w_{t-1-j}+w_{t}\\notag\\\\ &amp;=\\sum_{j=0}^{t}\\phi^{j}w_{t-j}\\notag \\end{align}\\] 由归纳法得知，命题得证。 \\(\\square\\) 4.3.2 (b) 求期望\\(E[x_{t}]\\): \\[\\begin{align} E[x_{t}] &amp;=E[\\sum_{j=0}^{t}\\phi^{j}w_{t-j}]\\notag\\\\ &amp;=\\sum_{j=0}^{t}\\phi^{j} E[w_{t-j}]\\notag\\\\ &amp;=0 \\notag \\end{align}\\] \\(\\square\\) 4.3.3 (c) 根据方差的性质： \\[ Var(ax)=a^{2}Var(x) \\] 以及公式： \\[ \\sum_{j=0}^{k}a_{j}=(1-a^{k+1})/(1-a) \\] 故可知\\(Var(x_{t})\\)为： \\[\\begin{align} Var[x_{t}] &amp;=Var[\\sum_{j=0}^{t}\\phi^{j}w_{t-j}]\\notag\\\\ &amp;=\\sum_{j=0}^{t}\\phi^{2j} Var[w_{t-j}]\\notag\\\\ &amp;=\\sigma_{w}^{2}\\sum_{j=0}^{t}\\phi^{2j} \\notag\\\\ &amp;=\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}}(1-\\phi^{2(t+1)})\\notag \\end{align}\\] \\(\\square\\) 4.3.4 (d) 利用前几问的结果，可以将 \\(x_{t+h}\\)表示为： \\[ x_{t+h}=\\phi^{h}x_{t}+\\sum_{j=0}^{h-1}\\phi^{j}w_{t+h-j} \\] 利用上式，可以计算\\(cov(x_{t+h},x_{t})\\): \\[\\begin{align} cov(x_{t+h,x},x_{t})&amp;=cov(\\phi^{h}x_{t}+\\sum_{j=0}^{h-1}\\phi^{j}w_{t+h-j},x_{t})\\notag\\\\ &amp;=\\phi^{h}cov(x_{t},x_{t})+cov(\\sum_{j=0}^{h-1}\\phi^{j}w_{t+h-j},x_{t})\\notag\\\\ &amp;=\\phi^{h}Var(x_{t})\\notag \\end{align}\\] \\(\\square\\) 4.3.5 (e) 由于序列的方差与时间有关，因此序列不是平稳的。 4.3.6 (f) 当\\(t\\to \\infty\\)时，可以发现： \\[ Var(x_{t})=\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}}(1-\\phi^{2(t+1)})\\to\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}} (|\\phi|&lt;1) \\] 即\\(t\\to \\infty\\)时，方差与\\(t\\)的关系逐渐消失，因此\\(x_{t}\\)是渐进平稳的。 4.3.7 (g) 生成n个以上的观测值，并丢弃最初生成的观测值。 4.3.8 (h) 根据题意，可以将\\(x_{t}\\)表示为: \\[ x_{t}=\\phi^{t}x_{0}+\\sum_{j=0}^{t-1}\\phi^{j} w_{t-j} \\] 则可知\\(Var(x_{t})\\)为： \\[\\begin{align} Var[x_{t}] &amp;= Var[\\sum_{j=0}^{t-1}\\phi^{j}w_{t-j}] + Var[\\phi^{t}x_{0}]\\notag\\\\ &amp;=\\sum_{j=0}^{t-1}\\phi^{2j} Var[w_{t-j}] + Var[\\phi^{t}\\frac{w_{0}}{\\sqrt{1-\\phi^2}}]\\notag\\\\ &amp;=\\sigma_{w}^{2}\\sum_{j=0}^{t-1}\\phi^{2j}-\\frac{\\phi^{2t}}{1-\\phi^{2}}Var[w_{0}] \\notag\\\\ &amp;=\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}}(1-\\phi^{2t})-\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}}\\phi^{2t}\\notag\\\\ &amp;=\\frac{\\sigma_{w}^{2}}{1-\\phi_{2}}\\notag \\end{align}\\] 即方差与时间\\(t\\)无关。同时易知\\(x_{t}\\)的期望仍然为0。因此可以得知，这个过程是平稳的。 \\(\\square\\) 4.4 4.3 参数冗余的讨论 4.4.1 (a) 模型1可以表示为： \\[ (1-0.3B)(1-0.5B)x_{t}=(1-0.3B)w_{t} \\] 等式两边可以约分，因此模型1存在参数冗余。化简后的模型为： \\[ x_{t}=0.5x_{t-1}+w_{t} \\] 这是一个AR模型。 模型2可以表示为： \\[ (1-B+0.5B^{2})x_{t}=(1-B)w_{t} \\] 等式两边无法约分，因此模型2不存在参数冗余。 4.4.2 (b) 模型(i) AR(1)模型 \\(\\phi\\)的根大于1，因此模型(i)为因果模型。 模型(ii) ARMA(2,1)模型 \\(\\phi\\)的根大于1，因此模型(ii)为因果模型。\\(\\theta\\)的根等于1，因此模型(ii)不是可逆模型。 Mod(polyroot(c(1,-.5))) ## [1] 2 Mod(polyroot(c(1,-.1,.5))) ## [1] 1.414214 1.414214 Mod(polyroot(c(1,-1))) ## [1] 1 4.4.3 (c) 模型(i)的因果系数和可逆系数 round(ARMAtoMA(ar = .5, ma = 0 , 50),3)#前50个因果系数 ## [1] 0.500 0.250 0.125 0.062 0.031 0.016 0.008 0.004 0.002 0.001 0.000 0.000 ## [13] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [25] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [37] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [49] 0.000 0.000 round(ARMAtoAR(ar = .5, ma = 0 , 50),3)#前五十个可逆系数 ## [1] -0.5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ## [16] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ## [31] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ## [46] 0.0 0.0 0.0 0.0 0.0 模型(ii)的因果系数和可逆系数 round(ARMAtoMA(ar = c(1.-.5), ma = -1 , 50),3)#前50个因果系数 ## [1] -0.500 -0.250 -0.125 -0.062 -0.031 -0.016 -0.008 -0.004 -0.002 -0.001 ## [11] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [21] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [31] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## [41] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 round(ARMAtoAR(ar = c(1,-.5), ma = -1 , 50),3)#前五十个可逆系数 ## [1] 0.0 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ## [20] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ## [39] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 4.5 4.4 三个ARMA模型 4.5.1 (a) 首先，针对三个不同的ARMA模型，绘制它们的ACF和PACF： #ARMA(1,1) ACF = ARMAacf(ar=.6, ma=.9, 24)[-1] PACF = ARMAacf(ar=.6, ma=.9, 24, pacf=TRUE) par(mfrow=1:2) tsplot(ACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(1,1)&quot;) tsplot(PACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(1,1)&quot;) #ARMA(1,0) ACF = ARMAacf(ar=0.6, ma=0, 24)[-1] PACF = ARMAacf(ar=0.6, ma=0, 24, pacf=TRUE) par(mfrow=1:2) tsplot(ACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(1,0)&quot;) tsplot(PACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(1,0)&quot;) #ARMA(0,1) ACF = ARMAacf(ar=0, ma=0.9, 24)[-1] PACF = ARMAacf(ar=0, ma=0.9, 24, pacf=TRUE) par(mfrow=1:2) tsplot(ACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(0,1)&quot;) tsplot(PACF, type=&quot;h&quot;, xlab=&quot;lag&quot;, ylim=c(-.8,1)) abline(h=0, col=8) title(&quot;ARMA(0,1)&quot;) 各类模型的ACF，PACF表现如下表所示： AR(p) MA(q) ARMA(p,q) ACF 拖尾 在滞后q处截尾 拖尾 PACF 在滞后p处截尾 拖尾 拖尾 ACF可以确定MA(q)模型的阶数q，PACF可以确定AR(p)模型的阶数p。对于ARMA(p,q)模型，无法使用ACF，PACF来判断它的具体阶数。 4.5.2 (b) 取样本数为\\(n=100\\)，分别绘制三个模型的ACF，PACF： ARMA(1,1) arma&lt;-arima.sim(list(order=c(1,0,1),ar=.6,ma=.9),n=100) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## ACF 0.7 0.24 0.05 0.04 0 -0.11 -0.19 -0.21 -0.21 -0.23 -0.22 -0.15 -0.07 ## PACF 0.7 -0.49 0.36 -0.19 0 -0.16 0.00 -0.11 -0.07 -0.12 0.02 -0.03 -0.02 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] ## ACF -0.06 -0.11 -0.08 -0.02 -0.02 0.03 0.18 ## PACF -0.13 -0.05 0.06 -0.18 0.01 0.15 0.14 ARMA(1,0) arma&lt;-arima.sim(list(order=c(1,0,0),ar=.6),n=100) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] ## ACF 0.6 0.27 0.05 -0.15 -0.22 -0.12 0.01 0.09 0.07 0.11 0.09 0.05 ## PACF 0.6 -0.13 -0.08 -0.19 -0.02 0.11 0.09 -0.01 -0.08 0.10 0.02 0.03 ## [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] ## ACF -0.04 -0.07 -0.02 0.03 0.11 0.05 0.08 0.08 ## PACF -0.12 0.00 0.10 0.07 0.07 -0.20 0.15 0.04 ARMA(0,1) arma&lt;-arima.sim(list(order=c(0,0,1),ma=.9),n=100) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] ## ACF 0.54 0.04 -0.03 -0.09 -0.19 -0.26 -0.16 -0.01 -0.01 -0.01 0.07 0.17 ## PACF 0.54 -0.36 0.22 -0.28 0.00 -0.22 0.15 -0.10 0.00 -0.03 0.07 0.10 ## [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] ## ACF 0.18 0.07 0.00 -0.03 -0.12 -0.26 -0.31 -0.18 ## PACF 0.02 -0.02 0.01 -0.06 -0.06 -0.20 -0.06 -0.02 观察发现，样本容量\\(n=100\\)时，ACF，PACF可能不太准确，与理论值存在比较大的误差。ARMA(1,0)模型的PACF本应该在LAG=1处截尾，ARMA(0,1)模型的ACF也应该在LAG=1处截尾。但是，实际上得到的结果并不支持这一结论。 4.5.3 (c) 重新选取样本容量\\(n=500\\)，分别绘制三个模型的ACF，PACF： ARMA(1,1) arma&lt;-arima.sim(list(order=c(1,0,1),ar=.6,ma=.9),n=500) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## ACF 0.81 0.49 0.26 0.11 0.04 0.01 -0.01 -0.01 0.00 -0.01 -0.05 -0.10 -0.14 ## PACF 0.81 -0.48 0.24 -0.21 0.20 -0.16 0.08 -0.02 0.02 -0.08 -0.03 -0.07 -0.02 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] ## ACF -0.16 -0.17 -0.16 -0.16 -0.15 -0.15 -0.15 -0.14 -0.13 -0.11 -0.1 -0.08 ## PACF -0.04 -0.02 -0.05 -0.01 -0.07 0.00 -0.07 0.02 -0.05 -0.01 0.0 -0.04 ## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] ## ACF -0.07 -0.08 -0.07 -0.05 -0.02 0 0.01 0.01 ## PACF -0.04 -0.05 0.04 -0.02 -0.02 0 -0.05 0.00 ARMA(1,0) arma&lt;-arima.sim(list(order=c(1,0,0),ar=.6),n=500) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## ACF 0.59 0.35 0.22 0.19 0.13 0.09 0.04 0.04 0.04 0.03 0.01 -0.01 -0.02 ## PACF 0.59 0.01 0.02 0.08 -0.03 0.00 -0.02 0.03 0.00 -0.01 0.00 -0.03 -0.02 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] ## ACF 0.03 0.03 0.02 0.04 0.05 0.06 0.06 0.05 0.04 0.06 0.02 -0.02 ## PACF 0.09 -0.03 0.00 0.05 0.00 0.03 0.01 0.00 0.00 0.04 -0.05 -0.04 ## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] ## ACF -0.06 -0.07 -0.07 -0.08 -0.08 -0.06 -0.09 -0.13 ## PACF -0.05 0.00 -0.04 -0.02 0.00 0.01 -0.08 -0.06 ARMA(0,1) arma&lt;-arima.sim(list(order=c(0,0,1),ma=.9),n=500) acf2(arma) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## ACF 0.5 0.03 0.02 -0.01 -0.04 -0.01 0.03 0.03 0.05 0.03 -0.02 -0.02 -0.03 ## PACF 0.5 -0.31 0.23 -0.20 0.11 -0.06 0.08 -0.05 0.10 -0.10 0.05 -0.06 0.02 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] ## ACF -0.03 -0.02 0.00 0.04 0.05 0.00 0.00 0.01 -0.01 -0.04 -0.01 0.06 ## PACF -0.04 0.02 -0.01 0.08 -0.03 -0.01 0.03 -0.02 0.00 -0.04 0.05 0.05 ## [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] ## ACF 0.04 0.00 0.06 0.08 -0.01 -0.05 -0.02 0.03 ## PACF -0.06 0.05 0.05 0.01 -0.06 0.01 0.01 0.05 可以发现，增大样本容量使得PACF，ACF本应有的截尾性质更加显著。 4.6 4.5 cmort数据分析 4.6.1 (a) xt=diff(cmort) tsplot(cmort, main=&quot;Cardiovascular Mortality&quot;, col=6, type=&quot;o&quot;, pch=19, ylab=&quot;&quot;) tsplot(xt, main=&quot;Diff Cardiovascular Mortality&quot;, col=6, type=&quot;o&quot;, pch=19, ylab=&quot;&quot;) 在进行差分后数据更加的接近均值为0的白噪声，并且不再有明显的趋势。因此进行差分是合理的做法。 4.6.2 (b) acf1(xt) pacf(xt) ACF的图像近似为拖尾的，而PACF可以认为是在滞后\\(p=1\\)处截尾，因此由表4.1，AR(1)适用于\\(x_{t}\\)。 4.6.3 (c) # 拟合ARIMA模型 model &lt;- sarima(xt, p = 1, d = 0, q = 0, no.constant = TRUE) #获取回归参数的检验 ttable &lt;- model$ttable # 获取模型的残差标准差 residual_std &lt;- model$fit$sigma2 #显著性检验 cat(&quot;回归参数估计以及相关统计量为：\\n&quot;) ## 回归参数估计以及相关统计量为： ttable ## Estimate SE t.value p.value ## ar1 -0.5064 0.0383 -13.2224 0 由于p-value很小，因此可以AR(1)的回归参数估计是显著的。 # 输出残差标准差 cat(&quot;白噪声方差的估计值为：&quot;, residual_std, &quot;\\n&quot;) ## 白噪声方差的估计值为： 33.81057 4.6.4 (d) sarima(xt, p = 1, d = 0, q = 0, no.constant = TRUE) 利用Normal Q-Q Plot of Std Residuals图来检测残差，可以认为残差为白噪声。 4.6.5 (e) 对未来四个星期进行预测，并计算相应的95%的预测间隔： sarima_result=sarima.for(xt,n.ahead=4,p=1,d=0,q=0) # 提取预测值 forecast_values &lt;- sarima_result$pred # 提取标准误差 se &lt;- sarima_result$se # 计算95%预测间隔的上限和下限 lower_bound &lt;- forecast_values - 2 * se upper_bound &lt;- forecast_values + 2 * se # 输出预测结果和预测间隔 week &lt;- c(&quot;week 1&quot;,&quot;week 2&quot;,&quot;week 3&quot;,&quot;week 4&quot;) result &lt;- data.frame(week,预测值 = forecast_values, 下限 = lower_bound, 上限 = upper_bound) result ## week 预测值 下限 上限 ## 1 week 1 1.9555424 -9.673559 13.58464 ## 2 week 2 -1.0298842 -14.065001 12.00523 ## 3 week 3 0.4818973 -12.889967 13.85376 ## 4 week 4 -0.2836494 -13.740508 13.17321 4.6.6 (f) 首先，预测值是通过运行SARIMA模型的预测函数（例如sarima.for()）得到的。这个函数基于已有的时间序列数据和模型参数，根据模型的推断方法来生成未来时间点的预测值。在例子中，sarima.for()函数返回了一个包含四个预测值的时间序列对象，分别对应未来四个时间点的预测。 然后，标准误差是指模型在预测过程中产生的误差的标准差。它用来度量模型预测的不确定性。在例子中，sarima.for()函数还返回了一个包含四个标准误差值的时间序列对象，分别对应于每个预测值的标准误差。 接下来，根据预测值和标准误差，可以计算出预测区间。预测区间是用来表示预测值的不确定性范围，通常以置信水平的形式给出（如95%置信区间）。在这种情况下，我们可以使用预测值加减两倍标准误差来计算95%的预测区间。下限等于预测值减去两倍的标准误差，上限等于预测值加上两倍的标准误差。 因此，根据结果，预测区间可以通过预测值加减两倍标准误差来计算得到。这个预测区间可以帮助评估预测值的可靠性，并提供对未来观测值可能的范围的一定程度的估计。 4.6.7 (g) 心血管死亡率实际值提前一步预测\\(c_{n+1}^{n}\\)等于 \\[ c_{n+1}^{n}=\\phi c_{n}=-0.5064c_{n} \\] 4.7 4.6 模型预测与MSPE m步预测为 \\[ x_{n+m}^{n}=\\phi^{m}x_{n} \\] 根据课本上的结果及几何级数的和，MSPE为： \\[\\begin{align} E[(x_{n+m}-x_{n+m}^{n})^{2}]&amp;=\\sigma_{w}^{2}(1+\\phi^2+···+\\phi……{2(m-1)})\\notag\\\\ &amp;=\\sigma_{w}^{2}\\frac{1-\\phi^{2m}}{1-\\phi^2}\\notag \\end{align}\\] 4.8 4.7 参数估计 # 重复进行五次实验 num_experiments &lt;- 5 output &lt;- &quot;&quot; # 初始化输出字符串 for (i in 1:num_experiments) { # 生成100个iid N(0,1)观测值并拟合ARMA(1,1)模型 data &lt;- rnorm(100) model &lt;- sarima(data, 1, 0, 1) # 输出参数估计结果 output &lt;- paste(output, &quot;在实验&quot;, i, &quot;中，拟合的ARMA(1,1)模型的参数估计结果为：\\n&quot;) output &lt;- paste(output, &quot;AR 参数估计值:&quot;, model$fit$coef[1],&quot;\\n&quot;) output &lt;- paste(output, &quot;MA 参数估计值:&quot;, model$fit$coef[2],&quot;\\n&quot;) output &lt;- paste(output, &quot;\\n&quot;) } # 输出信息 cat(output) ## 在实验 1 中，拟合的ARMA(1,1)模型的参数估计结果为： ## AR 参数估计值: -0.471503493155923 ## MA 参数估计值: 0.6102172613011 ## ## 在实验 2 中，拟合的ARMA(1,1)模型的参数估计结果为： ## AR 参数估计值: -0.662910634161264 ## MA 参数估计值: 0.583349220329755 ## ## 在实验 3 中，拟合的ARMA(1,1)模型的参数估计结果为： ## AR 参数估计值: 0.532586608641356 ## MA 参数估计值: -0.414304525082842 ## ## 在实验 4 中，拟合的ARMA(1,1)模型的参数估计结果为： ## AR 参数估计值: 0.558430221940262 ## MA 参数估计值: -0.703347009129763 ## ## 在实验 5 中，拟合的ARMA(1,1)模型的参数估计结果为： ## AR 参数估计值: -0.652726392342175 ## MA 参数估计值: 0.922044360823668 ## 4.9 4.8 参数的MLE 生成参数\\(\\phi=0.9, \\theta=0.5, \\sigma^{2}=1\\)的ARMA(1,1)过程的\\(n=200\\)个观测值，重复十次，并且每次都求出三个参数的MLE： set.seed(2023)#使得结果可重现 c()-&gt;phi-&gt;theta-&gt;sigma2 for (i in 1:10) { x = arima.sim(n=200,list(ar=.9,ma=.5)) fit = arima(x, order = c(1,0,1)) phi[i]=fit$coef[1]; theta[i]=fit$coef[2]; sigma2=fit$sigma2 } A=cbind(&quot;phi&quot;=phi,&quot;theta&quot;=theta,&quot;sigma2&quot;=sigma2) A ## phi theta sigma2 ## [1,] 0.9472737 0.4324380 1.026246 ## [2,] 0.8677612 0.4774988 1.026246 ## [3,] 0.8824127 0.5129200 1.026246 ## [4,] 0.9237088 0.4689059 1.026246 ## [5,] 0.9408428 0.3550534 1.026246 ## [6,] 0.8050361 0.5683730 1.026246 ## [7,] 0.9317511 0.4796632 1.026246 ## [8,] 0.9029819 0.4977130 1.026246 ## [9,] 0.9061346 0.5107797 1.026246 ## [10,] 0.9203406 0.5325410 1.026246 可以使用误差值和真实值之间的误差图来对比真实值和误差值： # 真实值 true_phi &lt;- 0.9 true_theta &lt;- 0.5 true_sigma2 &lt;- 1 # 估计值 estimated_phi &lt;- A[,1] estimated_theta &lt;- A[,2] estimated_sigma2 &lt;- A[,3] # 计算误差 error_phi &lt;- estimated_phi - true_phi error_theta &lt;- estimated_theta - true_theta error_sigma2 &lt;- estimated_sigma2 - true_sigma2 # 创建数据框 error_data &lt;- data.frame(index = 1:10, phi = error_phi, theta = error_theta, sigma2 = error_sigma2) # 绘制误差图 ggplot(data = error_data) + geom_line(aes(x = index, y = phi, color = &quot;phi&quot;), size = 1) + geom_line(aes(x = index, y = theta, color = &quot;theta&quot;), size = 1) + geom_line(aes(x = index, y = sigma2, color = &quot;sigma2&quot;), size = 1) + labs(x = &quot;Index&quot;, y = &quot;Error&quot;, title = &quot;Error Plot&quot;) + geom_point(aes(x = index, y = phi, color = &quot;phi&quot;), size = 3) + geom_point(aes(x = index, y = theta, color = &quot;theta&quot;), size = 3) + geom_point(aes(x = index, y = sigma2, color = &quot;sigma2&quot;), size = 3) + labs(x = &quot;Index&quot;, y = &quot;Error&quot;, title = &quot;Error Plot&quot;) + scale_color_manual(values = c(&quot;phi&quot; = &quot;#1f77b4&quot;, &quot;theta&quot; = &quot;#ff7f0e&quot;, &quot;sigma2&quot; = &quot;#2ca02c&quot;),name = &quot;&quot;) + theme_minimal() + theme(legend.position = &quot;top&quot;) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. 可以发现\\(\\sigma^2\\)的误差恒定，\\(\\theta\\)的误差振幅较大。 4.10 4.9 AR(1)的高斯-牛顿算法 AR(1)过程\\(x_{t}=\\phi x_{t-1}+w_{t}\\)其误差为： \\[ w_{t}(\\phi)=x_{t}-\\phi x_{t-1} \\] 其中，\\(x_{t}\\)是时间序列的当前观测值，\\(x_{t-1}\\)是前一时刻的观测值，\\(w_{t}\\)是误差项，\\(\\phi\\)是我们要估计的自回归参数。 高斯-牛顿算法的基本思想是通过迭代寻找使得目标函数达到最小化的参数值。在AR(1)模型中，我们可以将参数估计问题转化为最小化目标函数的问题。 对于AR(1)模型，可以构建似然函数或平方和损失函数作为目标函数。然后，我们使用高斯-牛顿算法的迭代步骤来更新参数值，直到达到收敛条件。在本例中选取 \\[ S_{c}(\\phi)=\\sum_{t=1}^{n}w_{t}^{2}(\\phi) \\] 设\\(\\phi_{0}\\)是\\(\\phi\\)的一个初始估计。\\(S_{c}(\\phi)\\)在\\(\\phi_{0}\\)的一阶泰勒展式为： \\[ S_{c}(\\phi)=\\sum_{t=1}^{n}w_{t}^{2}(\\phi)\\approx \\sum_{t=1}^{n}[w_{t}(\\phi_{0})-(\\phi-\\phi_{0})z_{t}(\\phi_{0})]^{2} \\] 其中， \\[ z_{t}(\\phi_{0})=-\\frac{\\partial w_{\\phi}}{\\partial \\phi}\\mid_{\\phi=\\phi_{0}} \\] 经运算可得 \\[ z_{t}(\\phi_{0})= x_{t-1} \\] 因为算法使用给定的数据\\(x_{1},···,x_{n}\\)，而不考虑任何条件信息。因此高斯-牛顿算法过程产生的估计可以被视为无条件估计。 总结起来，高斯-牛顿算法可以用于估计AR(1)模型中的自回归参数。该算法过程产生的估计是无条件估计，因为它不考虑任何条件信息。 4.11 4.10 预测误差 构造\\(\\Delta\\)如下： \\[\\begin{align} \\Delta&amp;=\\sum_{j=0}^{\\infty}\\phi_{j}w_{m+n-j}^{n}-\\sum_{j=m}^{\\infty}\\phi_{j}w_{m+n-j}\\notag\\\\ &amp;=\\sum_{j=0}^{m-1}\\phi_{j}w_{m+n-j}^{n} + \\sum_{j=m}^{\\infty}\\phi_{j}(w_{m+n-j}^{n}-w_{m+n-j})\\notag \\end{align}\\] 由于时间序列\\(x_{t}\\)可以写成因果和的形式，那么常数\\(\\phi_{j}\\)存在如下约束： \\[ \\sum_{j=0}^{\\infty}\\phi^{2}&lt;\\infty \\] 这表明\\(n\\to\\infty\\)时，\\(\\phi_{j}\\to 0\\)。因此有 \\[ \\sum_{j=0}^{m-1}\\phi_{j}w_{m+n-j}^{n} \\to 0 , n\\to\\infty \\] 当\\(j\\ge m\\)时，\\(w_{n+m-j}^{n}\\)实际上是确定已知的历史数据\\(w_{n+m-j}\\)，因此 \\[ \\sum_{j=m}^{\\infty}\\phi_{j}(w_{m+n-j}^{n}-w_{m+n-j})=0 \\] 综上可知，当\\(n\\to0\\)时，\\(\\Delta\\to0\\)。这表明，当n充分大的时候，有如下结果： \\[ x_{n+m}^{n}=\\sum_{j=0}^{\\infty}\\phi_{j}w_{m+n-j}^{n}=\\sum_{j=m}^{\\infty}\\phi_{j}w_{m+n-j} \\] 利用上面的结果可以证明如下结论： \\[\\begin{align} E[x_{n+m}-x_{n+m}^{n}]^{2}&amp;=E[\\sum_{j=0}^{\\infty}\\phi_{j}w_{m+n-j}-\\sum_{j=m}^{\\infty}\\phi_{j}w_{m+n-j}]\\notag\\\\ &amp;=E[\\sum_{j=0}^{m-1}\\phi_{j}w_{n+m-j}]^{2}\\notag\\\\ &amp;=\\sum_{j=0}^{m-1}\\phi_{j}^{2}E[w_{n+m-j}^{2}]\\notag\\\\ &amp;=\\sigma^{2}_{w}\\sum_{j=0}^{m-1}\\phi_{j}^{2}\\notag \\end{align}\\] \\(\\square\\) "]]
